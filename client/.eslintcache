[{"C:\\Yahalom\\projects\\QuizManager\\client\\src\\index.js":"1","C:\\Yahalom\\projects\\QuizManager\\client\\src\\App.js":"2","C:\\Yahalom\\projects\\QuizManager\\client\\src\\reportWebVitals.js":"3","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestFieldMenu.js":"4","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestManager.js":"5","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestion.js":"6","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\NewTest.js":"7","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionManager.js":"8","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getFieldsService.js":"9","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newTestService.js":"10","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\allTestsService.js":"11","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestRow\\TestRow.js":"12","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\NewTestForm\\NewTestForm.js":"13","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\EmailForm.js":"14","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestionForm.js":"15","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelector.js":"16","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\allQuestionsService.js":"17","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionRow.js":"18","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\emailTamplate.js":"19","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelectorRow.js":"20","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Answer\\Answer.js":"21","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\httpService.js":"22","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UI\\TextEditor\\TextEditor.js":"23","C:\\Yahalom\\projects\\QuizManager\\client\\src\\environments\\environment.js":"24","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestion.js":"25","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTest.js":"26","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getTestById.js":"27","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateEmail\\UpdateEmailForm.js":"28","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTestForm.js\\UpdateTestForm.js":"29","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\QuestionPagination.js":"30","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestionForm.js":"31","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getQuestionById.js":"32","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\Test.js":"33","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestUserForm\\TestUserForm.js":"34","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newUserService.js":"35","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestProcess\\TestProcess.js":"36","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\Question\\Question.js":"37","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newQuestionService.js":"38","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestReview\\TestReview.js":"39","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\QuestionReview\\QuestionReview.js":"40","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newTestInstanceService.js":"41","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getUserById.js":"42","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\updateTestService.js":"43"},{"size":565,"mtime":1645005696053,"results":"44","hashOfConfig":"45"},{"size":2666,"mtime":1645986368826,"results":"46","hashOfConfig":"45"},{"size":375,"mtime":1645005696054,"results":"47","hashOfConfig":"45"},{"size":1313,"mtime":1645985386885,"results":"48","hashOfConfig":"45"},{"size":2102,"mtime":1645985988397,"results":"49","hashOfConfig":"45"},{"size":4029,"mtime":1645908364284,"results":"50","hashOfConfig":"45"},{"size":4778,"mtime":1645985466410,"results":"51","hashOfConfig":"45"},{"size":2454,"mtime":1645911610638,"results":"52","hashOfConfig":"45"},{"size":228,"mtime":1645085691163,"results":"53","hashOfConfig":"45"},{"size":211,"mtime":1645031532926,"results":"54","hashOfConfig":"45"},{"size":261,"mtime":1645372852346,"results":"55","hashOfConfig":"45"},{"size":970,"mtime":1645699424476,"results":"56","hashOfConfig":"45"},{"size":3395,"mtime":1645985717601,"results":"57","hashOfConfig":"45"},{"size":1853,"mtime":1645095393590,"results":"58","hashOfConfig":"45"},{"size":2959,"mtime":1645803444515,"results":"59","hashOfConfig":"45"},{"size":2752,"mtime":1645985866522,"results":"60","hashOfConfig":"45"},{"size":226,"mtime":1645625794422,"results":"61","hashOfConfig":"45"},{"size":933,"mtime":1645908364287,"results":"62","hashOfConfig":"45"},{"size":202,"mtime":1645009580461,"results":"63","hashOfConfig":"45"},{"size":2487,"mtime":1645798320000,"results":"64","hashOfConfig":"45"},{"size":656,"mtime":1645619739575,"results":"65","hashOfConfig":"45"},{"size":614,"mtime":1645005696054,"results":"66","hashOfConfig":"45"},{"size":691,"mtime":1645875107545,"results":"67","hashOfConfig":"45"},{"size":61,"mtime":1645005696053,"results":"68","hashOfConfig":"45"},{"size":4995,"mtime":1645908364289,"results":"69","hashOfConfig":"45"},{"size":4714,"mtime":1645986632831,"results":"70","hashOfConfig":"45"},{"size":241,"mtime":1645700876458,"results":"71","hashOfConfig":"45"},{"size":1887,"mtime":1645971569620,"results":"72","hashOfConfig":"45"},{"size":3305,"mtime":1645985934103,"results":"73","hashOfConfig":"45"},{"size":695,"mtime":1645908364288,"results":"74","hashOfConfig":"45"},{"size":3298,"mtime":1645803444521,"results":"75","hashOfConfig":"45"},{"size":255,"mtime":1645803444522,"results":"76","hashOfConfig":"45"},{"size":2093,"mtime":1645971778217,"results":"77","hashOfConfig":"45"},{"size":2401,"mtime":1645971478429,"results":"78","hashOfConfig":"45"},{"size":211,"mtime":1645868070953,"results":"79","hashOfConfig":"45"},{"size":3360,"mtime":1645970925397,"results":"80","hashOfConfig":"45"},{"size":1537,"mtime":1645970384911,"results":"81","hashOfConfig":"45"},{"size":213,"mtime":1645908364291,"results":"82","hashOfConfig":"45"},{"size":1841,"mtime":1645962899217,"results":"83","hashOfConfig":"45"},{"size":1744,"mtime":1645969642160,"results":"84","hashOfConfig":"45"},{"size":267,"mtime":1645970903612,"results":"85","hashOfConfig":"45"},{"size":241,"mtime":1645971163050,"results":"86","hashOfConfig":"45"},{"size":195,"mtime":1645973063395,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"126a1o2",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Yahalom\\projects\\QuizManager\\client\\src\\index.js",[],["193","194"],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\App.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\reportWebVitals.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestFieldMenu.js",["195","196","197"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, Header, Select } from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport getFieldsService from '../../services/getFieldsService';\r\n\r\nconst TestFieldMenu = () => {\r\n  const navigation = useNavigate();\r\n  const [fields, setFields] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  const onSelectFieldHandler = (e) => {\r\n    navigation(`/tests?field=${e.target.innerText}`);\r\n  };\r\n\r\n  return (\r\n    <Container textAlign=\"left\">\r\n      <Header as=\"h1\">Welcome to QuizManager!</Header>\r\n      <Header as=\"h3\">Please select the field of tests:</Header>\r\n      <Select\r\n        options={fields}\r\n        selection\r\n        placeholder=\"Select a Field\"\r\n        options={fields}\r\n        onChange={onSelectFieldHandler}\r\n      ></Select>\r\n      <Button\r\n        onClick={() => {\r\n          navigation('/new-test');\r\n        }}\r\n        color=\"blue\"\r\n      >\r\n        Create new test!\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TestFieldMenu;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestManager.js",["198","199","200","201"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Table, Input, Header, Segment } from 'semantic-ui-react';\r\nimport TestRow from './TestRow/TestRow';\r\nimport allTestsService from '../../services/allTestsService';\r\n\r\nconst TestManager = () => {\r\n  const [tests, setTests] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(async () => {\r\n    setTests([]);\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const field = urlParams.get('field');\r\n    var testsData = await allTestsService.getAllTests(field);\r\n    testsData.data.map((test) => {\r\n      setTests((prevState) => [...prevState, test]);\r\n    });\r\n    if (search !== '') {\r\n      setTests([]);\r\n      testsData.data.map((test) => {\r\n        if (test.name.includes(search)) {\r\n          setTests((prevState) => [...prevState, test]);\r\n        }\r\n      });\r\n    }\r\n  }, [search]);\r\n\r\n  return (\r\n    <div>\r\n      <Segment>\r\n        <Header textAlign=\"left\" as=\"h1\">\r\n          Test Managet:\r\n        </Header>\r\n        <Input\r\n          icon=\"search\"\r\n          onChange={(e) => setSearch(e.target.value)}\r\n          type=\"text\"\r\n          placeholder=\"Search for test by name:\"\r\n        />\r\n        <Table celled selectable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Name</Table.HeaderCell>\r\n              <Table.HeaderCell>Number Of Questions</Table.HeaderCell>\r\n              <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n              <Table.HeaderCell></Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {tests.map((test) => {\r\n              return (\r\n                <TestRow\r\n                  id={test.id}\r\n                  testUrl={test.testUrl}\r\n                  name={test.name}\r\n                  numOfQuestions={test.questions.length}\r\n                  lastUpdated={test.lastUpdated}\r\n                />\r\n              );\r\n            })}\r\n          </Table.Body>\r\n        </Table>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestManager;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestion.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\NewTest.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionManager.js",["202","203","204","205","206","207"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table } from 'semantic-ui-react';\r\nimport getAllQuestions from '../../services/allQuestionsService';\r\nimport QuestionRow from './QuestionRow';\r\n\r\nconst QuestionManager = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [tags, setTags] = useState('');\r\n\r\n  useEffect(async () => {\r\n   const allQuestions = await getAllQuestions.getAllQuestions()\r\n   allQuestions.data.map((question) => {\r\n     setQuestions((prevState) => [...prevState, question])\r\n   })\r\n   if (tags !== ''){\r\n    const myTags = tags.split(\", \")\r\n     setQuestions([])\r\n     allQuestions.data.map(question => {\r\n       myTags.map(tag => {\r\n         question.tags.map(t => {\r\n           if(tag === t){\r\n            setQuestions((prevState) => [...prevState, question])\r\n           }\r\n         })\r\n       })\r\n     })\r\n   } \r\n  }, [tags])\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Question Manager</h1>\r\n      search by tag: <input type='text' onChange={e => setTags(e.target.value)}/>\r\n<Table celled selectable>\r\n      <Table.Header>\r\n        <Table.Row>\r\n          <Table.HeaderCell>Question Type</Table.HeaderCell>\r\n          <Table.HeaderCell>Title</Table.HeaderCell>\r\n          <Table.HeaderCell>Content</Table.HeaderCell>\r\n          <Table.HeaderCell>Answers</Table.HeaderCell>\r\n          <Table.HeaderCell>View Answers</Table.HeaderCell>\r\n          <Table.HeaderCell>Tags</Table.HeaderCell>\r\n          <Table.HeaderCell>Points</Table.HeaderCell>\r\n        </Table.Row>\r\n      </Table.Header>\r\n      <Table.Body>\r\n        {questions.map((question) => {\r\n          return (\r\n            <QuestionRow\r\n              questionType={question.questionType}\r\n              title={question.title}\r\n              content={question.content}\r\n              //answers={question.answers}\r\n              viewAnswers={question.viewAnswers}\r\n              tags={question.tags}\r\n              points={question.points}\r\n            />\r\n          );\r\n        })}\r\n      </Table.Body>\r\n    </Table>\r\n    </div>\r\n  );    \r\n};\r\n \r\nexport default QuestionManager","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getFieldsService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newTestService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\allTestsService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\TestManager\\TestRow\\TestRow.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\NewTestForm\\NewTestForm.js",["208","209"],"import { useState, useEffect } from 'react';\r\nimport { Header, Form, Radio, Container, Segment } from 'semantic-ui-react';\r\nimport TextEditor from '../../UI/TextEditor/TextEditor';\r\nimport getFieldsService from '../../../services/getFieldsService';\r\n\r\nconst NewTestForm = (props) => {\r\n  const [fields, setFields] = useState([]);\r\n  const languageOptions = [\r\n    { key: 'hebrew', value: 'hebrew', text: 'Hebrew' },\r\n    { key: 'english', value: 'english', text: 'English' }\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Field:\r\n        <Form.Select\r\n          error={props.fieldError}\r\n          selection\r\n          placeholder=\"Select a Field\"\r\n          options={fields}\r\n          onChange={(e) => props.setField(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Answer Review:\r\n        <Container>\r\n          <Radio\r\n            toggle\r\n            onChange={() => props.setAnswerReview(!props.answerReview)}\r\n          />\r\n        </Container>\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Language:\r\n        <Form.Select\r\n          error={props.languageError}\r\n          selection\r\n          placeholder=\"Select a Language\"\r\n          options={languageOptions}\r\n          onChange={(e) => props.setLenguage(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Test Name:\r\n        <Form.Input\r\n          error={props.nameError}\r\n          fluid\r\n          placeholder=\"Test Name\"\r\n          onChange={(e) => props.setName(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Creater Email:\r\n        <Form.Input\r\n          error={props.emailError}\r\n          fluid\r\n          placeholder=\"Email\"\r\n          onChange={(e) => props.setEmail(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Passing Grade:\r\n        <Form.Input\r\n          error={props.passingGradeError}\r\n          fluid\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPassingGrade(e.target.value)}\r\n        />\r\n      </Header>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Header\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.header}\r\n            setEditorState={props.setHeader}\r\n          />\r\n        </Segment>\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Message to show on success:\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.successMsg}\r\n            setEditorState={props.setSuccessMsg}\r\n          />\r\n        </Segment>\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Message to show on failure:\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.failMsg}\r\n            setEditorState={props.setFailMsg}\r\n          />\r\n        </Segment>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewTestForm;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\EmailForm.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestionForm.js",["210","211"],"import React, { useState, useEffect } from 'react';\r\nimport './NewQuestionForm.css';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport Answer from '../Answer/Answer';\r\n\r\nconst NewQuestionForm = (props) => {\r\n  const questionType = [\r\n    {\r\n      key: 'SingleChoiceQuestion',\r\n      value: 'SingleChoiceQuestion',\r\n      text: 'SingleChoiceQuestion'\r\n    },\r\n    {\r\n      key: 'MultipleSelectionQuestion',\r\n      value: 'MultipleSelectionQuestion',\r\n      text: 'MultipleSelectionQuestion'\r\n    }\r\n  ];\r\n  const viewAnswers = [\r\n    { key: 'Horizontal', value: 'Horizontal', text: 'Horizontal' },\r\n    { key: 'Vertical', value: 'Vertical', text: 'Vertical' }\r\n  ];\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Question Type:\r\n        <Form.Select\r\n          error={props.questionTypeError}\r\n          selection\r\n          placeholder=\"Select a question Type\"\r\n          options={questionType}\r\n          onChange={(e) => props.setQuestionType(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Title:\r\n        <Form.Input\r\n          error={props.titleError}\r\n          placeholder=\"Title\"\r\n          onChange={(e) => props.setTitle(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Content:\r\n        <Form.Input\r\n          placeholder=\"Content\"\r\n          onChange={(e) => props.setContent(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Points:\r\n        <Form.Input\r\n          error={props.pointsError}\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPoints(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        <p>*In tags you have to write a word and at the end ',' click on the space and write the next word </p>\r\n        Tags:\r\n        <Form.Input\r\n          error={props.tagsError}\r\n          type=\"Text\"\r\n          onChange={(e) => props.setTags(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Answers:\r\n        <Answer\r\n          error={props.answer1Error}\r\n          setData={props.setAnswer1}\r\n          data={props.answer1}\r\n        />\r\n        <Answer\r\n          error={props.answer2Error}\r\n          setData={props.setAnswer2}\r\n          data={props.answer2}\r\n        />\r\n        <Answer\r\n          error={props.answer3Error}\r\n          setData={props.setAnswer3}\r\n          data={props.answer3}\r\n        />\r\n        <Answer\r\n          error={props.answer4Error}\r\n          setData={props.setAnswer4}\r\n          data={props.answer4}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        viewAnswers:\r\n        <Form.Select\r\n          error={props.viewAnswersError}\r\n          selection\r\n          placeholder=\"Select a view answers\"\r\n          options={viewAnswers}\r\n          onChange={(e) => props.setViewAnswers(e.target.innerText)}\r\n        />\r\n      </Header>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewQuestionForm;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelector.js",["212","213","214","215","216","217","218","219"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Header,\r\n  Input,\r\n  Table,\r\n  Button,\r\n  Segment\r\n} from 'semantic-ui-react';\r\nimport getAllQuestions from '../../../services/allQuestionsService';\r\nimport QuestionSelectorRow from './QuestionSelectorRow';\r\n\r\nconst QuestionSelector = (props) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [tags, setTags] = useState('');\r\n  const [numSelected, setNumSelected] = useState(0);\r\n\r\n  useEffect(async () => {\r\n    const allQuestions = await getAllQuestions.getAllQuestions();\r\n    allQuestions.data.map((question) => {\r\n      setQuestions((prevState) => [...prevState, question]);\r\n    });\r\n    if (tags !== '') {\r\n      const myTags = tags.split(', ');\r\n      setQuestions([]);\r\n      allQuestions.data.map((question) => {\r\n        myTags.map((tag) => {\r\n          question.tags.map((t) => {\r\n            if (tag === t) {\r\n              setQuestions((prevState) => [...prevState, question]);\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [tags]);\r\n\r\n  const viewQuestion = () => {};\r\n\r\n  return (\r\n    <div>\r\n      <Segment>\r\n        <Container textAlign=\"left\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => setTags(e.target.value)}\r\n            icon=\"search\"\r\n            placeholder=\"Search with tags...\"\r\n          />\r\n          <Header>\r\n            Questions Selected:<Header color=\"green\">{numSelected}</Header>\r\n          </Header>\r\n        </Container>\r\n        <Container>\r\n          <Table color=\"green\" celled selectable>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Header\r\n                  as=\"h2\"\r\n                  content=\"Questions List\"\r\n                  subheader=\"Please select the questions you would like to add...\"\r\n                />\r\n              </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n              {questions.map((question) => {\r\n                return (\r\n                  <QuestionSelectorRow\r\n                    tags={tags}\r\n                    numSelected={numSelected}\r\n                    setNumSelected={setNumSelected}\r\n                    questions={props.questions}\r\n                    setQuestions={props.setQuestions}\r\n                    questionsChanges={props.questionsChanges}\r\n                    id={question.id}\r\n                    content={question.content}\r\n                    answers={question.answers}\r\n                    name={question.title}\r\n                    tags={question.tags}\r\n                  />\r\n                );\r\n              })}\r\n            </Table.Body>\r\n          </Table>\r\n        </Container>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionSelector;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\allQuestionsService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionRow.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\emailTamplate.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelectorRow.js",["220","221","222"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  List,\r\n  Popup,\r\n  Table\r\n} from 'semantic-ui-react';\r\n\r\nconst QuestionSelectorRow = (props) => {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.questions.map((q) => {\r\n      if (q === props.id) setIsSelected(true);\r\n    });\r\n  }, [props.tags]);\r\n\r\n  const onClickHandler = () => {\r\n    setIsSelected(!isSelected);\r\n    let tempState = [...props.questions];\r\n    if (!isSelected) {\r\n      props.setQuestions((prevState) => [...prevState, props.id]);\r\n      props.setNumSelected(props.numSelected + 1);\r\n    } else {\r\n      props.questions.map((q) => {\r\n        if (props.id === q) {\r\n          let index = props.questions.indexOf(props.id);\r\n          tempState.splice(index, 1);\r\n          props.setQuestions(tempState);\r\n        }\r\n        props.setNumSelected(props.numSelected - 1);\r\n      });\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Table.Row>\r\n      <Table.Cell positive={isSelected} onClick={onClickHandler}>\r\n        <div>\r\n          <Header as=\"h5\" textAlign=\"left\">\r\n            {props.name}\r\n          </Header>\r\n          <List horizontal>\r\n            {props.tags.map((tag) => {\r\n              return <List.Item as=\"a\">{tag}</List.Item>;\r\n            })}\r\n          </List>\r\n        </div>\r\n      </Table.Cell>\r\n      <Table.Cell>\r\n        <Popup trigger={<Button>View</Button>}>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Container>\r\n                <Header as=\"h1\">{props.name}</Header>\r\n              </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Container>\r\n                <Header as=\"h3\">{props.content}</Header>\r\n              </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Container>\r\n                {props.answers.map((a) => {\r\n                  if (a.isTrue)\r\n                    return (\r\n                      <Header color=\"green\" as=\"h4\">\r\n                        {a.content}\r\n                      </Header>\r\n                    );\r\n                  else\r\n                    return (\r\n                      <Header color=\"red\" as=\"h4\">\r\n                        {a.content}\r\n                      </Header>\r\n                    );\r\n                })}\r\n              </Container>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Popup>\r\n      </Table.Cell>\r\n    </Table.Row>\r\n  );\r\n};\r\n\r\nexport default QuestionSelectorRow;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Answer\\Answer.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\httpService.js",[],["223","224"],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UI\\TextEditor\\TextEditor.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\environments\\environment.js",["225"],"export default {\r\n  serverUrl: \"http://localhost:4000\",\r\n};\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestion.js",["226"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container } from 'semantic-ui-react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport getQuestionById from '../../services/getQuestionById';\r\nimport QuestionService from '../../services/questionService';\r\nimport UpdateQuestionForm from './UpdateQuestionForm';\r\n\r\nconst UpdateQuestion = () => {\r\n    const navigation = useNavigate();\r\n    const [questionType, setQuestionType] = useState('');\r\n    const [viewAnswers, setViewAnswers] = useState('');\r\n    const [points, setPoints] = useState(0);\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [tags, setTags] = useState('');\r\n    const [answer1, setAnswer1] = useState({ content: '', isTrue: false });\r\n    const [answer2, setAnswer2] = useState({ content: '', isTrue: false });\r\n    const [answer3, setAnswer3] = useState({ content: '', isTrue: false });\r\n    const [answer4, setAnswer4] = useState({ content: '', isTrue: false });\r\n\r\n    const [questionTypeError, setQuestionTypeError] = useState(false);\r\n    const [pointsError, setPointsError] = useState(false);\r\n    const [titleError, setTitleError] = useState(false);\r\n    const [tagsError, setTagsError] = useState(false);\r\n    const [answer1Error, setAnswer1Error] = useState(false);\r\n    const [answer2Error, setAnswer2Error] = useState(false);\r\n    const [answer3Error, setAnswer3Error] = useState(false);\r\n    const [answer4Error, setAnswer4Error] = useState(false);\r\n    const [viewAnswersError, setViewAnswersError] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const idParam = urlParams.get('id');\r\n        const question = await getQuestionById.getQuestionById(idParam);\r\n        let data = question.data[0];\r\n        updateState(data);\r\n      }, []);\r\n\r\n      const updateState = (data) => {\r\n          setQuestionType(data.questionType)\r\n          setViewAnswers(data.viewAnswers)\r\n          setPoints(data.points)\r\n          setTitle(data.title)\r\n          setContent(data.content)\r\n          setTags(data.tags)\r\n          setAnswer1(data.answer1)\r\n          setAnswer2(data.answer2)\r\n          setAnswer3(data.answer3)\r\n          setAnswer4(data.answer4)\r\n      };\r\n\r\n  const newQuestionHandler = () => {\r\n    const date = new Date();\r\n    const id = uuidv4();\r\n    var answers = [answer1, answer2, answer3, answer4];\r\n    const myTags = tags.split(', ');\r\n\r\n    if (questionType === '') {\r\n        setQuestionTypeError(true);\r\n      } else if (points > 10 || points < 0) {\r\n        setPointsError(true);\r\n      } else if (title === '') {\r\n        setTitleError(true);\r\n      } else if (tags === '') {\r\n        setTagsError(true);\r\n      } else if (answer1 === '') {\r\n        setAnswer1Error(true);\r\n      } else if (answer2 === '') {\r\n        setAnswer2Error(true);\r\n      } else if (answer3 === '') {\r\n        setAnswer3Error(true);\r\n      } else if (answer4 === '') {\r\n        setAnswer4Error(true);\r\n      } else if (viewAnswers === '') {\r\n        setViewAnswersError(true);\r\n      } else {\r\n        const newQuestion = {\r\n          id: id,\r\n          questionType: questionType,\r\n          title: title,\r\n          content: content,\r\n          answers: answers,\r\n          viewAnswers: viewAnswers,\r\n          tags: myTags,\r\n          points: points,\r\n          lastUpdated: `${date.getDate()}/${\r\n            date.getMonth() + 1\r\n          }/${date.getFullYear()}`,\r\n        };\r\n        QuestionService.addQuestion(newQuestion);\r\n        navigation('/question-added');\r\n      }\r\n    };\r\n\r\n  return (\r\n    <Container>\r\n      <h1>New Question</h1>\r\n      <UpdateQuestionForm\r\n        setQuestionType={setQuestionType}\r\n        setPoints={setPoints}\r\n        setTitle={setTitle}\r\n        setTags={setTags}\r\n        setContent={setContent}\r\n        setAnswer1={setAnswer1}\r\n        setAnswer2={setAnswer2}\r\n        setAnswer3={setAnswer3}\r\n        setAnswer4={setAnswer4}\r\n        setViewAnswers={setViewAnswers}\r\n        answer1={answer1}\r\n        answer2={answer2}\r\n        answer3={answer3}\r\n        answer4={answer4}\r\n        tags={tags}\r\n        title={title}\r\n        viewAnswers={viewAnswers}\r\n        questionTypeError={questionTypeError}\r\n        pointsError={pointsError}\r\n        titleError={titleError}\r\n        tagsError={tagsError}\r\n        answer1Error={answer1Error}\r\n        answer2Error={answer2Error}\r\n        answer3Error={answer3Error}\r\n        answer4Error={answer4Error}\r\n        viewAnswersError={viewAnswersError}\r\n      />\r\n      <Container textAlign=\"right\">\r\n        <Button className=\"ui green button\" onClick={newQuestionHandler}>\r\n          Create New Question\r\n        </Button>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateQuestion;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTest.js",["227","228","229","230","231"],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getTestById.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateEmail\\UpdateEmailForm.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTestForm.js\\UpdateTestForm.js",["232","233"],"import { useState, useEffect } from 'react';\r\nimport { Header, Form, Segment } from 'semantic-ui-react';\r\nimport TextEditor from '../../UI/TextEditor/TextEditor';\r\nimport getFieldsService from '../../../services/getFieldsService';\r\n\r\nconst UpdateTestForm = (props) => {\r\n  const [fields, setFields] = useState([]);\r\n  const languageOptions = [\r\n    { key: 'hebrew', value: 'hebrew', text: 'Hebrew' },\r\n    { key: 'english', value: 'english', text: 'English' }\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Field:\r\n        <Form.Select\r\n          value={props.field}\r\n          error={props.fieldError}\r\n          selection\r\n          placeholder=\"Select a Field\"\r\n          options={fields}\r\n          onChange={(e) => props.setField(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Language:\r\n        <Form.Select\r\n          value={props.language}\r\n          error={props.languageError}\r\n          selection\r\n          placeholder=\"Select a Language\"\r\n          options={languageOptions}\r\n          onChange={(e) => props.setLenguage(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Test Name:\r\n        <Form.Input\r\n          value={props.name}\r\n          error={props.nameError}\r\n          fluid\r\n          placeholder=\"Test Name\"\r\n          onChange={(e) => props.setName(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Creater Email:\r\n        <Form.Input\r\n          value={props.email}\r\n          error={props.emailError}\r\n          fluid\r\n          placeholder=\"Email\"\r\n          onChange={(e) => props.setEmail(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Passing Grade:\r\n        <Form.Input\r\n          value={props.passingGrade}\r\n          error={props.passingGradeError}\r\n          fluid\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPassingGrade(e.target.value)}\r\n        />\r\n      </Header>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Header\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.header}\r\n            setEditorState={props.setHeader}\r\n          />\r\n        </Segment>\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Message to show on success:\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.successMsg}\r\n            setEditorState={props.setSuccessMsg}\r\n          />\r\n        </Segment>\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Segment>\r\n          <Header textAlign=\"left\" as=\"h2\">\r\n            Message to show on failure:\r\n          </Header>\r\n          <TextEditor\r\n            editorState={props.failMsg}\r\n            setEditorState={props.setFailMsg}\r\n          />\r\n        </Segment>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UpdateTestForm;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\QuestionPagination.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestionForm.js",["234","235"],"import React, { useState, useEffect } from 'react';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport Answer from '../Answer/Answer';\r\n\r\nconst UpdateQuestionForm = (props) => {\r\n  const questionType = [\r\n    {\r\n      key: 'SingleChoiceQuestion',\r\n      value: 'SingleChoiceQuestion',\r\n      text: 'SingleChoiceQuestion'\r\n    },\r\n    {\r\n      key: 'MultipleSelectionQuestion',\r\n      value: 'MultipleSelectionQuestion',\r\n      text: 'MultipleSelectionQuestion'\r\n    }\r\n  ];\r\n  const viewAnswers = [\r\n    { key: 'Horizontal', value: 'Horizontal', text: 'Horizontal' },\r\n    { key: 'Vertical', value: 'Vertical', text: 'Vertical' }\r\n  ];\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Question Type:\r\n        <Form.Select\r\n          value={props.questionType}\r\n          error={props.questionTypeError}\r\n          selection\r\n          placeholder=\"Select a question Type\"\r\n          options={questionType}\r\n          onChange={(e) => props.setQuestionType(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Title:\r\n        <Form.Input\r\n          value={props.title}\r\n          error={props.titleError}\r\n          placeholder=\"Title\"\r\n          onChange={(e) => props.setTitle(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Content:\r\n        <Form.Input\r\n          value={props.content}\r\n          placeholder=\"Content\"\r\n          onChange={(e) => props.setContent(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Points:\r\n        <Form.Input\r\n          value={props.points}\r\n          error={props.pointsError}\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPoints(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        <p>*In tags you have to write a word and at the end ',' click on the space and write the next word </p>\r\n        Tags:\r\n        <Form.Input\r\n          value={props.tags}\r\n          error={props.tagsError}\r\n          type=\"Text\"\r\n          onChange={(e) => props.setTags(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Answers:\r\n        <Answer\r\n          value={props.answer1}\r\n          error={props.answer1Error}\r\n          setData={props.setAnswer1}\r\n          data={props.answer1}\r\n        />\r\n        <Answer\r\n          value={props.answer2}\r\n          error={props.answer2Error}\r\n          setData={props.setAnswer2}\r\n          data={props.answer2}\r\n        />\r\n        <Answer\r\n          value={props.answer3}\r\n          error={props.answer3Error}\r\n          setData={props.setAnswer3}\r\n          data={props.answer3}\r\n        />\r\n        <Answer\r\n          value={props.answer4}\r\n          error={props.answer4Error}\r\n          setData={props.setAnswer4}\r\n          data={props.answer4}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        viewAnswers:\r\n        <Form.Select\r\n          value={props.viewAnswers}\r\n          error={props.viewAnswersError}\r\n          selection\r\n          placeholder=\"Select a view answers\"\r\n          options={viewAnswers}\r\n          onChange={(e) => props.setViewAnswers(e.target.innerText)}\r\n        />\r\n      </Header>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UpdateQuestionForm;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getQuestionById.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\Test.js",["236","237"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, Header, Icon } from 'semantic-ui-react';\r\nimport TestUserForm from './TestUserForm/TestUserForm';\r\nimport getTestById from '../../services/getTestById';\r\nimport { Editor, EditorState, convertFromRaw } from 'draft-js';\r\nimport TestProcess from './TestProcess/TestProcess';\r\nimport TestReview from './TestReview/TestReview';\r\n\r\nconst Test = () => {\r\n  // stages work like that, 0: sigh up stage,\r\n  // 1: start of the test, 2: test in progress,\r\n  // 3: end of test and submition of answers\r\n  const [testStage, setTestStage] = useState(0);\r\n  const [userId, setUserId] = useState('');\r\n  const [testData, setTestData] = useState({});\r\n  const [opening, setOpening] = useState(() => EditorState.createEmpty());\r\n  const [testInstance, setTestInstance] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const idParam = urlParams.get('id');\r\n    const test = await getTestById.getTestById(idParam);\r\n    let data = test.data[0];\r\n    setTestData(data);\r\n    const contentState = convertFromRaw(JSON.parse(data.opening));\r\n    const editorState = EditorState.createWithContent(contentState);\r\n    setOpening(editorState);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {testStage === 0 ? (\r\n        <Container>\r\n          <TestUserForm setTestStage={setTestStage} setUserId={setUserId} />\r\n        </Container>\r\n      ) : testStage === 1 ? (\r\n        <Container>\r\n          <Editor readonly={true} editorState={opening} />\r\n          <Button icon labelPosition=\"right\" onClick={() => setTestStage(2)}>\r\n            Start Test<Icon name=\"flag checkered\"></Icon>\r\n          </Button>\r\n        </Container>\r\n      ) : testStage === 2 ? (\r\n        <TestProcess\r\n          setTestInstance={setTestInstance}\r\n          testData={testData}\r\n          setTestStage={setTestStage}\r\n          userId={userId}\r\n        />\r\n      ) : (\r\n        <TestReview testInstance={testInstance} testData={testData} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestUserForm\\TestUserForm.js",["238"],"import React, { useState } from 'react';\r\nimport { Button, Form, Header, Segment } from 'semantic-ui-react';\r\nimport newUserService from '../../../services/newUserService';\r\nimport { v4 as uuid4 } from 'uuid';\r\nimport getUserById from '../../../services/getUserById';\r\n\r\nconst TestUserForm = (props) => {\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n  const [firstNameError, setFirstNameError] = useState(false);\r\n  const [lastNameError, setLastNameError] = useState(false);\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\r\n\r\n  const submitHandler = () => {\r\n    if (firstName === '') setFirstNameError(true);\r\n    else if (lastName === '') setLastNameError(true);\r\n    else if (email === '') setEmailError(true);\r\n    else if (phoneNumber === '') setPhoneNumberError(true);\r\n    else {\r\n      const newUser = {\r\n        id: uuid4(),\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        email: email,\r\n        phoneNumber: phoneNumber,\r\n        userType: 'student'\r\n      };\r\n      newUserService.addUser(newUser);\r\n      props.setUserId(newUser.id);\r\n      props.setTestStage(1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Form>\r\n        <Header as=\"h1\">Welcome to QuizManager!</Header>\r\n        <Header as=\"h3\">Please enter your details:</Header>\r\n        <Form.Input\r\n          error={firstNameError}\r\n          label=\"First Name:\"\r\n          onChange={(e) => {\r\n            setFirstName(e.target.value);\r\n          }}\r\n        />\r\n        <Form.Input\r\n          error={lastNameError}\r\n          label=\"Last Name:\"\r\n          onChange={(e) => {\r\n            setLastName(e.target.value);\r\n          }}\r\n        />\r\n        <Form.Input\r\n          error={emailError}\r\n          label=\"Email:\"\r\n          onChange={(e) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n        />\r\n        <Form.Input\r\n          error={phoneNumberError}\r\n          label=\"Phone Number:\"\r\n          onChange={(e) => {\r\n            setPhoneNumber(e.target.value);\r\n          }}\r\n        />\r\n        <Button color=\"green\" onClick={submitHandler}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default TestUserForm;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newUserService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestProcess\\TestProcess.js",["239","240","241","242","243"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Container, Icon } from 'semantic-ui-react';\r\nimport Question from '../Question/Question';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport getQuestionById from '../../../services/getQuestionById';\r\nimport newTestInstanceService from '../../../services/newTestInstanceService';\r\n\r\nconst TestProcess = (props) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let questionsArray = [];\r\n    let count = 0;\r\n    props.testData.questions.map((q) => {\r\n      questionsArray.push({ index: count, id: q, answer: 0 });\r\n      count++;\r\n    });\r\n    setQuestions(questionsArray);\r\n  }, []);\r\n\r\n  const shuffleQuestions = (questionsArray) => {\r\n    let currentIndex = questionsArray.length,\r\n      randomIndex;\r\n\r\n    while (currentIndex != 0) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n      [questionsArray[currentIndex], questionsArray[randomIndex]] = [\r\n        questionsArray[randomIndex],\r\n        questionsArray[currentIndex]\r\n      ];\r\n    }\r\n\r\n    return questionsArray;\r\n  };\r\n\r\n  const finishTestHandler = async () => {\r\n    let currentGrade = 0;\r\n    for (let index = 0; index < questions.length; index++) {\r\n      let question = await getQuestionById.getQuestionById(questions[index].id);\r\n      if (question.data[0].answers[questions[index].answer - 1].isTrue)\r\n        currentGrade = currentGrade + question.data[0].points;\r\n    }\r\n    let newTestInstance = {\r\n      id: uuidv4(),\r\n      testId: props.testData.id,\r\n      userId: props.userId,\r\n      questions: questions,\r\n      grade: currentGrade\r\n    };\r\n    newTestInstanceService.addTestInstance(newTestInstance);\r\n    props.setTestInstance(newTestInstance);\r\n    props.setTestStage(3);\r\n  };\r\n  return (\r\n    <div>\r\n      {questions.map((q) => {\r\n        if (q.index === index) {\r\n          return (\r\n            <Container>\r\n              <Question\r\n                index={q.index}\r\n                id={q.id}\r\n                answer={q.answer}\r\n                questions={questions}\r\n                setQuestions={setQuestions}\r\n              />\r\n            </Container>\r\n          );\r\n        }\r\n      })}\r\n      <Container>\r\n        {index === questions.length - 1 ? (\r\n          <Container>\r\n            <Button onClick={finishTestHandler} color=\"green\">\r\n              Finish Test\r\n            </Button>\r\n            <Button onClick={() => setIndex(index - 1)}>\r\n              Previous Question<Icon name=\"angle right\"></Icon>\r\n            </Button>\r\n          </Container>\r\n        ) : index === 0 ? (\r\n          <Container>\r\n            <Button onClick={() => setIndex(index + 1)}>\r\n              <Icon name=\"angle left\"></Icon>\r\n              Next Question\r\n            </Button>\r\n          </Container>\r\n        ) : index !== 0 ? (\r\n          <Container>\r\n            <Button onClick={() => setIndex(index + 1)}>\r\n              <Icon name=\"angle left\"></Icon>\r\n              Next Question\r\n            </Button>\r\n            <Button onClick={() => setIndex(index - 1)}>\r\n              Previous Question<Icon name=\"angle right\"></Icon>\r\n            </Button>\r\n          </Container>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestProcess;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\Question\\Question.js",["244","245"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Radio, Segment } from 'semantic-ui-react';\r\nimport getQuestionById from '../../../services/getQuestionById';\r\n\r\nconst Question = (props) => {\r\n  const [question, setQuestion] = useState({});\r\n  const [selected, setSelected] = useState({});\r\n  let count = 0;\r\n\r\n  useEffect(async () => {\r\n    const newQuestion = await getQuestionById.getQuestionById(props.id);\r\n    let q = newQuestion.data[0];\r\n    setQuestion(q);\r\n    setSelected(props.answer);\r\n  }, []);\r\n\r\n  const handleChange = (e, { value }) => {\r\n    setSelected(value);\r\n    let items = [...props.questions];\r\n    let item = { ...items[props.index], answer: value };\r\n    items[props.index] = item;\r\n    props.setQuestions(items);\r\n  };\r\n  return (\r\n    <Segment>\r\n      <Header as=\"h1\">{question.title}</Header>\r\n      <Header as=\"h3\">{question.content}</Header>\r\n      <Container>\r\n        {question.answers !== undefined ? (\r\n          question.answers.map((answer) => {\r\n            count = count + 1;\r\n            return (\r\n              <Container textAlign=\"left\">\r\n                <Radio\r\n                  label={answer.content}\r\n                  name=\"radioGroup\"\r\n                  value={count}\r\n                  checked={selected === count}\r\n                  onChange={handleChange}\r\n                />\r\n              </Container>\r\n            );\r\n          })\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newQuestionService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\TestReview\\TestReview.js",["246","247"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Container, Header } from 'semantic-ui-react';\r\nimport { Editor, EditorState, convertFromRaw } from 'draft-js';\r\nimport QuestionReview from '../QuestionReview/QuestionReview';\r\n\r\nconst TestReview = (props) => {\r\n  const [text, setText] = useState(() => EditorState.createEmpty());\r\n  const [pass, setPass] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.testInstance.grade >= props.testData.passingGrade) {\r\n      const contentState = convertFromRaw(\r\n        JSON.parse(props.testData.passingText)\r\n      );\r\n      const editorState = EditorState.createWithContent(contentState);\r\n      setText(editorState);\r\n      setPass(true);\r\n    } else {\r\n      const contentState = convertFromRaw(JSON.parse(props.testData.failText));\r\n      const editorState = EditorState.createWithContent(contentState);\r\n      setText(editorState);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      {props.testData.answerReview === false ? (\r\n        <Container>\r\n          <Header as=\"h1\">Thank you for your answers</Header>\r\n          <Header as=\"h2\">Test Results will be emailed to you</Header>\r\n        </Container>\r\n      ) : (\r\n        <Container>\r\n          <Header textAlign=\"left\">\r\n            Your Score:\r\n            {pass ? (\r\n              <Header color=\"green\">{props.testInstance.grade}</Header>\r\n            ) : (\r\n              <Header colot=\"red\">{props.testInstance.grade}</Header>\r\n            )}\r\n          </Header>\r\n          <Header as=\"h1\">\r\n            <Editor readonly={true} editorState={text} />\r\n          </Header>\r\n          {props.testInstance.questions.map((q) => {\r\n            return <QuestionReview question={q} answer={q.answer} />;\r\n          })}\r\n        </Container>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TestReview;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\components\\Test\\QuestionReview\\QuestionReview.js",["248","249"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Header, Radio, Segment } from 'semantic-ui-react';\r\nimport getQuestionById from '../../../services/getQuestionById';\r\n\r\nconst QuestionReview = (props) => {\r\n  let count = 0;\r\n  const [question, setQuestion] = useState({\r\n    title: '',\r\n    content: '',\r\n    answers: []\r\n  });\r\n  useEffect(async () => {\r\n    count = 0;\r\n    const q = await getQuestionById.getQuestionById(props.question.id);\r\n    setQuestion(q.data[0]);\r\n  }, []);\r\n\r\n  return (\r\n    <Segment padded>\r\n      <Container textAlign=\"left\">\r\n        <Header as=\"h1\">{question.title}</Header>\r\n        <Header as=\"h2\">{question.content}</Header>\r\n        {question.answers.map((a) => {\r\n          count++;\r\n          return (\r\n            <Container>\r\n              {question.answers[count - 1].isTrue ? (\r\n                <Segment inverted color=\"green\">\r\n                  <Radio\r\n                    label={a.content}\r\n                    name={question.title}\r\n                    value={count}\r\n                    checked={props.answer === count}\r\n                    onClick={(e, { value }) => console.log(value)}\r\n                  />\r\n                </Segment>\r\n              ) : (\r\n                <Segment inverted color=\"red\">\r\n                  <Radio\r\n                    label={a.content}\r\n                    name={question.title}\r\n                    value={count}\r\n                    checked={props.answer === count}\r\n                    onClick={(e, { value }) => console.log(value)}\r\n                  />\r\n                </Segment>\r\n              )}\r\n            </Container>\r\n          );\r\n        })}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default QuestionReview;\r\n","C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\newTestInstanceService.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\getUserById.js",[],"C:\\Yahalom\\projects\\QuizManager\\client\\src\\services\\updateTestService.js",[],{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":10,"column":13,"nodeType":"256","endLine":18,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":12,"column":29,"nodeType":"256","messageId":"259","endLine":12,"endColumn":31},{"ruleId":"260","severity":1,"message":"261","line":32,"column":9,"nodeType":"262","endLine":32,"endColumn":25},{"ruleId":"263","severity":1,"message":"264","line":2,"column":10,"nodeType":"265","messageId":"266","endLine":2,"endColumn":19},{"ruleId":"254","severity":1,"message":"255","line":10,"column":13,"nodeType":"256","endLine":26,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":15,"column":31,"nodeType":"256","messageId":"259","endLine":15,"endColumn":33},{"ruleId":"257","severity":1,"message":"258","line":20,"column":33,"nodeType":"256","messageId":"259","endLine":20,"endColumn":35},{"ruleId":"263","severity":1,"message":"267","line":2,"column":10,"nodeType":"265","messageId":"266","endLine":2,"endColumn":16},{"ruleId":"254","severity":1,"message":"255","line":10,"column":13,"nodeType":"256","endLine":28,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":12,"column":37,"nodeType":"256","messageId":"259","endLine":12,"endColumn":39},{"ruleId":"257","severity":1,"message":"258","line":18,"column":37,"nodeType":"256","messageId":"259","endLine":18,"endColumn":39},{"ruleId":"257","severity":1,"message":"258","line":19,"column":23,"nodeType":"256","messageId":"259","endLine":19,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":20,"column":30,"nodeType":"256","messageId":"259","endLine":20,"endColumn":32},{"ruleId":"254","severity":1,"message":"255","line":13,"column":13,"nodeType":"256","endLine":21,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":15,"column":29,"nodeType":"256","messageId":"259","endLine":15,"endColumn":31},{"ruleId":"263","severity":1,"message":"268","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":25},{"ruleId":"263","severity":1,"message":"269","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"267","line":7,"column":3,"nodeType":"265","messageId":"266","endLine":7,"endColumn":9},{"ruleId":"254","severity":1,"message":"255","line":18,"column":13,"nodeType":"256","endLine":36,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":20,"column":38,"nodeType":"256","messageId":"259","endLine":20,"endColumn":40},{"ruleId":"257","severity":1,"message":"258","line":26,"column":40,"nodeType":"256","messageId":"259","endLine":26,"endColumn":42},{"ruleId":"257","severity":1,"message":"258","line":27,"column":26,"nodeType":"256","messageId":"259","endLine":27,"endColumn":28},{"ruleId":"257","severity":1,"message":"258","line":28,"column":33,"nodeType":"256","messageId":"259","endLine":28,"endColumn":35},{"ruleId":"263","severity":1,"message":"270","line":38,"column":9,"nodeType":"265","messageId":"266","endLine":38,"endColumn":21},{"ruleId":"260","severity":1,"message":"261","line":79,"column":21,"nodeType":"262","endLine":79,"endColumn":41},{"ruleId":"257","severity":1,"message":"258","line":16,"column":29,"nodeType":"256","messageId":"259","endLine":16,"endColumn":31},{"ruleId":"254","severity":1,"message":"271","line":19,"column":6,"nodeType":"272","endLine":19,"endColumn":18,"suggestions":"273"},{"ruleId":"257","severity":1,"message":"258","line":28,"column":31,"nodeType":"256","messageId":"259","endLine":28,"endColumn":33},{"ruleId":"250","replacedBy":"274"},{"ruleId":"252","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":1,"column":1,"nodeType":"278","endLine":3,"endColumn":3},{"ruleId":"254","severity":1,"message":"255","line":32,"column":15,"nodeType":"256","endLine":38,"endColumn":8},{"ruleId":"263","severity":1,"message":"279","line":6,"column":16,"nodeType":"265","messageId":"266","endLine":6,"endColumn":22},{"ruleId":"263","severity":1,"message":"280","line":8,"column":8,"nodeType":"265","messageId":"266","endLine":8,"endColumn":22},{"ruleId":"263","severity":1,"message":"281","line":9,"column":8,"nodeType":"265","messageId":"266","endLine":9,"endColumn":23},{"ruleId":"254","severity":1,"message":"255","line":33,"column":13,"nodeType":"256","endLine":40,"endColumn":4},{"ruleId":"254","severity":1,"message":"282","line":40,"column":6,"nodeType":"272","endLine":40,"endColumn":8,"suggestions":"283"},{"ruleId":"254","severity":1,"message":"255","line":13,"column":13,"nodeType":"256","endLine":21,"endColumn":4},{"ruleId":"257","severity":1,"message":"258","line":15,"column":29,"nodeType":"256","messageId":"259","endLine":15,"endColumn":31},{"ruleId":"263","severity":1,"message":"268","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":25},{"ruleId":"263","severity":1,"message":"269","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"284","line":2,"column":29,"nodeType":"265","messageId":"266","endLine":2,"endColumn":35},{"ruleId":"254","severity":1,"message":"255","line":19,"column":13,"nodeType":"256","endLine":28,"endColumn":4},{"ruleId":"263","severity":1,"message":"285","line":5,"column":8,"nodeType":"265","messageId":"266","endLine":5,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":15,"column":38,"nodeType":"256","messageId":"259","endLine":15,"endColumn":40},{"ruleId":"254","severity":1,"message":"286","line":20,"column":6,"nodeType":"272","endLine":20,"endColumn":8,"suggestions":"287"},{"ruleId":"263","severity":1,"message":"288","line":22,"column":9,"nodeType":"265","messageId":"266","endLine":22,"endColumn":25},{"ruleId":"289","severity":1,"message":"290","line":26,"column":25,"nodeType":"291","messageId":"292","endLine":26,"endColumn":27},{"ruleId":"257","severity":1,"message":"293","line":58,"column":26,"nodeType":"256","messageId":"294","endLine":58,"endColumn":28},{"ruleId":"254","severity":1,"message":"255","line":10,"column":13,"nodeType":"256","endLine":15,"endColumn":4},{"ruleId":"254","severity":1,"message":"295","line":15,"column":6,"nodeType":"272","endLine":15,"endColumn":8,"suggestions":"296"},{"ruleId":"263","severity":1,"message":"267","line":2,"column":10,"nodeType":"265","messageId":"266","endLine":2,"endColumn":16},{"ruleId":"254","severity":1,"message":"297","line":23,"column":6,"nodeType":"272","endLine":23,"endColumn":8,"suggestions":"298"},{"ruleId":"254","severity":1,"message":"255","line":12,"column":13,"nodeType":"256","endLine":16,"endColumn":4},{"ruleId":"254","severity":1,"message":"299","line":13,"column":13,"nodeType":"300","endLine":13,"endColumn":14},"no-native-reassign",["301"],"no-negated-in-lhs",["302"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'viewQuestion' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.id' and 'props.questions'. Either include them or remove the dependency array.","ArrayExpression",["303"],["301"],["302"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'uuidv4' is defined but never used.","'newTestService' is defined but never used.","'UpdateEmailForm' is defined but never used.","React Hook useEffect has a missing dependency: 'updateState'. Either include it or remove the dependency array.",["304"],"'Header' is defined but never used.","'getUserById' is defined but never used.","React Hook useEffect has a missing dependency: 'props.testData.questions'. Either include it or remove the dependency array.",["305"],"'shuffleQuestions' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'props.answer' and 'props.id'. Either include them or remove the dependency array. If 'setSelected' needs the current value of 'props.answer', you can also switch to useReducer instead of useState and read 'props.answer' in the reducer.",["306"],"React Hook useEffect has missing dependencies: 'props.testData.failText', 'props.testData.passingGrade', 'props.testData.passingText', and 'props.testInstance.grade'. Either include them or remove the dependency array.",["307"],"Assignments to the 'count' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-global-assign","no-unsafe-negation",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},"Update the dependencies array to be: [props.id, props.questions, props.tags]",{"range":"318","text":"319"},"Update the dependencies array to be: [updateState]",{"range":"320","text":"321"},"Update the dependencies array to be: [props.testData.questions]",{"range":"322","text":"323"},"Update the dependencies array to be: [props.answer, props.id]",{"range":"324","text":"325"},"Update the dependencies array to be: [props.testData.failText, props.testData.passingGrade, props.testData.passingText, props.testInstance.grade]",{"range":"326","text":"327"},[384,396],"[props.id, props.questions, props.tags]",[1843,1845],"[updateState]",[719,721],"[props.testData.questions]",[535,537],"[props.answer, props.id]",[919,921],"[props.testData.failText, props.testData.passingGrade, props.testData.passingText, props.testInstance.grade]"]