[{"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\index.js":"1","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\App.js":"2","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\NewTest.js":"4","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestManager.js":"5","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionManager.js":"6","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestion.js":"7","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionRow.js":"8","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\EmailForm.js":"9","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\NewTestForm\\NewTestForm.js":"10","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\newTestService.js":"11","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\allTestsService.js":"12","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestRow\\TestRow.js":"13","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestionForm.js":"14","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\emailTamplate.js":"15","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getFieldsService.js":"16","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\httpService.js":"17","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UI\\TextEditor\\TextEditor.js":"18","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\Answer\\Answer.js":"19","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\environments\\environment.js":"20","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\allQuestionsService.js":"21","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestFieldMenu.js":"22","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelector.js":"23","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelectorRow.js":"24","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\QuestionPagination.js":"25","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestion.js":"26","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTest.js":"27","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getTestById.js":"28","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTestForm.js\\UpdateTestForm.js":"29","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateEmail\\UpdateEmailForm.js":"30","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getQuestionById.js":"31","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestionForm.js":"32","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\newQuestionService.js":"33"},{"size":565,"mtime":1644760330581,"results":"34","hashOfConfig":"35"},{"size":1389,"mtime":1645791172035,"results":"36","hashOfConfig":"35"},{"size":375,"mtime":1644760330586,"results":"37","hashOfConfig":"35"},{"size":4245,"mtime":1645716568215,"results":"38","hashOfConfig":"35"},{"size":1994,"mtime":1645647618102,"results":"39","hashOfConfig":"35"},{"size":2448,"mtime":1645787951719,"results":"40","hashOfConfig":"35"},{"size":4029,"mtime":1645794794603,"results":"41","hashOfConfig":"35"},{"size":933,"mtime":1645793994136,"results":"42","hashOfConfig":"35"},{"size":1853,"mtime":1645102761549,"results":"43","hashOfConfig":"35"},{"size":2967,"mtime":1645185789441,"results":"44","hashOfConfig":"35"},{"size":211,"mtime":1645033167621,"results":"45","hashOfConfig":"35"},{"size":261,"mtime":1645625716184,"results":"46","hashOfConfig":"35"},{"size":970,"mtime":1645716568217,"results":"47","hashOfConfig":"35"},{"size":2959,"mtime":1645724857281,"results":"48","hashOfConfig":"35"},{"size":202,"mtime":1645025464364,"results":"49","hashOfConfig":"35"},{"size":228,"mtime":1645102761556,"results":"50","hashOfConfig":"35"},{"size":614,"mtime":1644760330587,"results":"51","hashOfConfig":"35"},{"size":707,"mtime":1644948609462,"results":"52","hashOfConfig":"35"},{"size":656,"mtime":1645463862128,"results":"53","hashOfConfig":"35"},{"size":61,"mtime":1644760330579,"results":"54","hashOfConfig":"35"},{"size":226,"mtime":1645621594621,"results":"55","hashOfConfig":"35"},{"size":1142,"mtime":1645625716180,"results":"56","hashOfConfig":"35"},{"size":2603,"mtime":1645647618099,"results":"57","hashOfConfig":"35"},{"size":2485,"mtime":1645647618100,"results":"58","hashOfConfig":"35"},{"size":695,"mtime":1645784398812,"results":"59","hashOfConfig":"35"},{"size":4995,"mtime":1645794844029,"results":"60","hashOfConfig":"35"},{"size":5281,"mtime":1645716568221,"results":"61","hashOfConfig":"35"},{"size":241,"mtime":1645716568224,"results":"62","hashOfConfig":"35"},{"size":3137,"mtime":1645716568223,"results":"63","hashOfConfig":"35"},{"size":1887,"mtime":1645716568219,"results":"64","hashOfConfig":"35"},{"size":255,"mtime":1645724411638,"results":"65","hashOfConfig":"35"},{"size":3298,"mtime":1645789353098,"results":"66","hashOfConfig":"35"},{"size":213,"mtime":1645794620602,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1a084mw",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\index.js",[],["146","147"],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\App.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\NewTest.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestManager.js",["148","149","150","151"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Table, Input, Header } from 'semantic-ui-react';\r\nimport TestRow from './TestRow/TestRow';\r\nimport allTestsService from '../../services/allTestsService';\r\n\r\nconst TestManager = () => {\r\n  const [tests, setTests] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(async () => {\r\n    setTests([]);\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const field = urlParams.get('field');\r\n    var testsData = await allTestsService.getAllTests(field);\r\n    testsData.data.map((test) => {\r\n      setTests((prevState) => [...prevState, test]);\r\n    });\r\n    if (search !== '') {\r\n      setTests([]);\r\n      testsData.data.map((test) => {\r\n        if (test.name.includes(search)) {\r\n          setTests((prevState) => [...prevState, test]);\r\n        }\r\n      });\r\n    }\r\n  }, [search]);\r\n\r\n  return (\r\n    <div>\r\n      <Header textAlign=\"left\" as=\"h1\">\r\n        Test Managet:\r\n      </Header>\r\n      <Input\r\n        onChange={(e) => setSearch(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"Search for test by name:\"\r\n      />\r\n      <Table celled selectable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Number Of Questions</Table.HeaderCell>\r\n            <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n            <Table.HeaderCell></Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {tests.map((test) => {\r\n            return (\r\n              <TestRow\r\n                id={test.id}\r\n                testUrl={test.testUrl}\r\n                name={test.name}\r\n                numOfQuestions={test.questions.length}\r\n                lastUpdated={test.lastUpdated}\r\n              />\r\n            );\r\n          })}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestManager;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionManager.js",["152","153","154","155","156"],"import { useEffect, useState } from 'react';\r\nimport { Table } from 'semantic-ui-react';\r\nimport getAllQuestions from '../../services/allQuestionsService';\r\nimport QuestionPagination from '../UpdateQuestion/QuestionPagination'\r\nimport QuestionRow from './QuestionRow';\r\n\r\nconst QuestionManager = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [tags, setTags] = useState('');\r\n\r\n  useEffect(async () => {\r\n   const urlParams = new URLSearchParams(window.location.search);\r\n   const id = urlParams.get('id');\r\n   const allQuestions = await getAllQuestions.getAllQuestions(id)\r\n   allQuestions.data.map((question) => {\r\n     setQuestions((prevState) => [...prevState, question])\r\n   })\r\n   if (tags !== ''){\r\n    const myTags = tags.split(\", \")\r\n     setQuestions([])\r\n     allQuestions.data.map(question => {\r\n       myTags.map(tag => {\r\n         question.tags.map(t => {\r\n           if(tag === t){\r\n            setQuestions((prevState) => [...prevState, question])\r\n           }\r\n         })\r\n       })\r\n     })\r\n   } \r\n  }, [tags])\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Question Manager</h1>\r\n      search by tag: <input type='text' onChange={e => setTags(e.target.value)}/>\r\n<Table celled selectable>\r\n      <Table.Header>\r\n        <Table.Row>\r\n          <Table.HeaderCell>Question Type</Table.HeaderCell>\r\n          <Table.HeaderCell>Title</Table.HeaderCell>\r\n          <Table.HeaderCell>Content</Table.HeaderCell>\r\n          <Table.HeaderCell>Answers</Table.HeaderCell>\r\n          <Table.HeaderCell>View Answers</Table.HeaderCell>\r\n          <Table.HeaderCell>Tags</Table.HeaderCell>\r\n          <Table.HeaderCell>Points</Table.HeaderCell>\r\n          <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n        </Table.Row>\r\n      </Table.Header>\r\n      <Table.Body>\r\n        {questions.map((question) => {\r\n          return (\r\n            <QuestionRow\r\n              id={question.id}\r\n              questionType={question.questionType}\r\n              title={question.title}\r\n              content={question.content}\r\n              //answers={question.answers}\r\n              viewAnswers={question.viewAnswers}\r\n              tags={question.tags}\r\n              points={question.points}\r\n              lastUpdated={question.lastUpdated}\r\n            />\r\n          );\r\n        })}\r\n        <QuestionPagination></QuestionPagination>\r\n      </Table.Body>\r\n    </Table>\r\n    </div>\r\n  );    \r\n};\r\n \r\nexport default QuestionManager","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestion.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\QuestionManager\\QuestionRow.js",["157"],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\EmailForm.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\NewTestForm\\NewTestForm.js",["158","159"],"import { useState, useEffect } from 'react';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport TextEditor from '../../UI/TextEditor/TextEditor';\r\nimport getFieldsService from '../../../services/getFieldsService';\r\n\r\nconst NewTestForm = (props) => {\r\n  const [fields, setFields] = useState([]);\r\n  const languageOptions = [\r\n    { key: 'hebrew', value: 'hebrew', text: 'Hebrew' },\r\n    { key: 'english', value: 'english', text: 'English' }\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Field:\r\n        <Form.Select\r\n          error={props.fieldError}\r\n          selection\r\n          placeholder=\"Select a Field\"\r\n          options={fields}\r\n          onChange={(e) => props.setField(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Language:\r\n        <Form.Select\r\n          error={props.languageError}\r\n          selection\r\n          placeholder=\"Select a Language\"\r\n          options={languageOptions}\r\n          onChange={(e) => props.setLenguage(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Test Name:\r\n        <Form.Input\r\n          error={props.nameError}\r\n          fluid\r\n          placeholder=\"Test Name\"\r\n          onChange={(e) => props.setName(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Creater Email:\r\n        <Form.Input\r\n          error={props.emailError}\r\n          fluid\r\n          placeholder=\"Email\"\r\n          onChange={(e) => props.setEmail(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Passing Grade:\r\n        <Form.Input\r\n          error={props.passingGradeError}\r\n          fluid\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPassingGrade(e.target.value)}\r\n        />\r\n      </Header>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Header\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.header}\r\n          setEditorState={props.setHeader}\r\n        />\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Message to show on success:\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.successMsg}\r\n          setEditorState={props.setSuccessMsg}\r\n        />\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Message to show on failure:\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.failMsg}\r\n          setEditorState={props.setFailMsg}\r\n        />\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewTestForm;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\newTestService.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\allTestsService.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestRow\\TestRow.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewQuestion\\NewQuestionForm.js",["160","161"],"import React, { useState, useEffect } from 'react';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport Answer from '../Answer/Answer';\r\n\r\nconst NewQuestionForm = (props) => {\r\n  const questionType = [\r\n    {\r\n      key: 'SingleChoiceQuestion',\r\n      value: 'SingleChoiceQuestion',\r\n      text: 'SingleChoiceQuestion'\r\n    },\r\n    {\r\n      key: 'MultipleSelectionQuestion',\r\n      value: 'MultipleSelectionQuestion',\r\n      text: 'MultipleSelectionQuestion'\r\n    }\r\n  ];\r\n  const viewAnswers = [\r\n    { key: 'Horizontal', value: 'Horizontal', text: 'Horizontal' },\r\n    { key: 'Vertical', value: 'Vertical', text: 'Vertical' }\r\n  ];\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Question Type:\r\n        <Form.Select\r\n          error={props.questionTypeError}\r\n          selection\r\n          placeholder=\"Select a question Type\"\r\n          options={questionType}\r\n          onChange={(e) => props.setQuestionType(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Title:\r\n        <Form.Input\r\n          error={props.titleError}\r\n          placeholder=\"Title\"\r\n          onChange={(e) => props.setTitle(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Content:\r\n        <Form.Input\r\n          placeholder=\"Content\"\r\n          onChange={(e) => props.setContent(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Points:\r\n        <Form.Input\r\n          error={props.pointsError}\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPoints(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        <p>*In tags you have to write a word and at the end ',' click on the space and write the next word </p>\r\n        Tags:\r\n        <Form.Input\r\n          error={props.tagsError}\r\n          type=\"Text\"\r\n          onChange={(e) => props.setTags(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Answers:\r\n        <Answer\r\n          error={props.answer1Error}\r\n          setData={props.setAnswer1}\r\n          data={props.answer1}\r\n        />\r\n        <Answer\r\n          error={props.answer2Error}\r\n          setData={props.setAnswer2}\r\n          data={props.answer2}\r\n        />\r\n        <Answer\r\n          error={props.answer3Error}\r\n          setData={props.setAnswer3}\r\n          data={props.answer3}\r\n        />\r\n        <Answer\r\n          error={props.answer4Error}\r\n          setData={props.setAnswer4}\r\n          data={props.answer4}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        viewAnswers:\r\n        <Form.Select\r\n          error={props.viewAnswersError}\r\n          selection\r\n          placeholder=\"Select a view answers\"\r\n          options={viewAnswers}\r\n          onChange={(e) => props.setViewAnswers(e.target.innerText)}\r\n        />\r\n      </Header>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewQuestionForm;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\EmailForm\\emailTamplate.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getFieldsService.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\httpService.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UI\\TextEditor\\TextEditor.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\Answer\\Answer.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\environments\\environment.js",["162"],"export default {\r\n  serverUrl: \"http://localhost:4000\",\r\n};\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\allQuestionsService.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\TestManager\\TestFieldMenu.js",["163","164","165"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Header, Select } from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport getFieldsService from '../../services/getFieldsService';\r\n\r\nconst TestFieldMenu = () => {\r\n  const navigation = useNavigate();\r\n  const [fields, setFields] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  const onSelectFieldHandler = (e) => {\r\n    navigation(`/tests?field=${e.target.innerText}`);\r\n  };\r\n\r\n  return (\r\n    <Container textAlign=\"left\">\r\n      <Header as=\"h1\">Welcome to QuizManager!</Header>\r\n      <Header as=\"h3\">Please select the field of tests:</Header>\r\n      <Select\r\n        options={fields}\r\n        selection\r\n        placeholder=\"Select a Field\"\r\n        options={fields}\r\n        onChange={onSelectFieldHandler}\r\n      ></Select>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TestFieldMenu;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelector.js",["166","167","168","169","170","171","172","173"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Input, Table, Button } from 'semantic-ui-react';\r\nimport getAllQuestions from '../../../services/allQuestionsService';\r\nimport QuestionSelectorRow from './QuestionSelectorRow';\r\n\r\nconst QuestionSelector = (props) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [tags, setTags] = useState('');\r\n  const [numSelected, setNumSelected] = useState(0);\r\n\r\n  useEffect(async () => {\r\n    const allQuestions = await getAllQuestions.getAllQuestions();\r\n    allQuestions.data.map((question) => {\r\n      setQuestions((prevState) => [...prevState, question]);\r\n    });\r\n    if (tags !== '') {\r\n      const myTags = tags.split(', ');\r\n      setQuestions([]);\r\n      allQuestions.data.map((question) => {\r\n        myTags.map((tag) => {\r\n          question.tags.map((t) => {\r\n            if (tag === t) {\r\n              setQuestions((prevState) => [...prevState, question]);\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [tags]);\r\n\r\n  const viewQuestion = () => {};\r\n\r\n  return (\r\n    <div>\r\n      <Container textAlign=\"left\">\r\n        <Input\r\n          type=\"text\"\r\n          onChange={(e) => setTags(e.target.value)}\r\n          icon=\"search\"\r\n          placeholder=\"Search with tags...\"\r\n        />\r\n        <Header>\r\n          Questions Selected:<Header color=\"green\">{numSelected}</Header>\r\n        </Header>\r\n      </Container>\r\n      <Container>\r\n        <Table color=\"green\" celled selectable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Header\r\n                as=\"h2\"\r\n                content=\"Questions List\"\r\n                subheader=\"Please select the questions you would like to add...\"\r\n              />\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {questions.map((question) => {\r\n              return (\r\n                <QuestionSelectorRow\r\n                  tags={tags}\r\n                  numSelected={numSelected}\r\n                  setNumSelected={setNumSelected}\r\n                  questions={props.questions}\r\n                  setQuestions={props.setQuestions}\r\n                  questionsChanges={props.questionsChanges}\r\n                  id={question.id}\r\n                  content={question.content}\r\n                  answers={question.answers}\r\n                  name={question.title}\r\n                  tags={question.tags}\r\n                />\r\n              );\r\n            })}\r\n          </Table.Body>\r\n        </Table>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionSelector;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\NewTest\\QuestionSelector\\QuestionSelectorRow.js",["174","175","176"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  List,\r\n  Popup,\r\n  Table\r\n} from 'semantic-ui-react';\r\n\r\nconst QuestionSelectorRow = (props) => {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.questions.map((q) => {\r\n      if (q === props.id) setIsSelected(true);\r\n    });\r\n  }, [props.tags]);\r\n\r\n  const onClickHandler = () => {\r\n    setIsSelected(!isSelected);\r\n    let tempState = [...props.questions];\r\n    if (!isSelected) {\r\n      props.setQuestions((prevState) => [...prevState, props.id]);\r\n      props.setNumSelected(props.numSelected + 1);\r\n    } else {\r\n      props.questions.map((q) => {\r\n        if (props.id === q) {\r\n          let index = props.questions.indexOf(props.id);\r\n          tempState.splice(index, 1);\r\n          props.setQuestions(tempState);\r\n        }\r\n        props.setNumSelected(props.numSelected - 1);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Table.Row>\r\n      <Table.Cell positive={isSelected} onClick={onClickHandler}>\r\n        <div>\r\n          <Header as=\"h5\" textAlign=\"left\">\r\n            {props.name}\r\n          </Header>\r\n          <List horizontal>\r\n            {props.tags.map((tag) => {\r\n              return <List.Item as=\"a\">{tag}</List.Item>;\r\n            })}\r\n          </List>\r\n        </div>\r\n      </Table.Cell>\r\n      <Table.Cell>\r\n        <Popup trigger={<Button>View</Button>}>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Container>\r\n                <Header as=\"h1\">{props.name}</Header>\r\n              </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Container>\r\n                <Header as=\"h3\">{props.contant}</Header>\r\n              </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Container>\r\n                {props.answers.map((a) => {\r\n                  if (a.isTrue)\r\n                    return (\r\n                      <Header color=\"green\" as=\"h4\">\r\n                        {a.content}\r\n                      </Header>\r\n                    );\r\n                  else\r\n                    return (\r\n                      <Header color=\"red\" as=\"h4\">\r\n                        {a.content}\r\n                      </Header>\r\n                    );\r\n                })}\r\n              </Container>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Popup>\r\n      </Table.Cell>\r\n    </Table.Row>\r\n  );\r\n};\r\n\r\nexport default QuestionSelectorRow;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\QuestionPagination.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestion.js",["177"],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTest.js",["178","179"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container } from 'semantic-ui-react';\r\nimport { EditorState, ContentState } from 'draft-js';\r\nimport getTestById from '../../services/getTestById';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport QuestionSelector from '../NewTest/QuestionSelector/QuestionSelector';\r\nimport newTestService from '../../services/newTestService';\r\nimport UpdateEmailForm from './UpdateEmail/UpdateEmailForm';\r\nimport UpdateTestForm from './UpdateTestForm.js/UpdateTestForm';\r\n\r\nconst UpdateTest = () => {\r\n  const navigation = useNavigate();\r\n  const [field, setField] = useState('');\r\n  const [language, setLenguage] = useState('');\r\n  const [passingGrade, setPassingGrade] = useState(0);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [header, setHeader] = useState(() => EditorState.createEmpty());\r\n  const [successMsg, setSuccessMsg] = useState(() => EditorState.createEmpty());\r\n  const [failMsg, setFailMsg] = useState(() => EditorState.createEmpty());\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const [subject, setSubject] = useState('');\r\n  const [passingEditor, setPassingEditor] = useState(() =>\r\n    EditorState.createEmpty()\r\n  );\r\n  const [failingEditor, setFailingEditor] = useState(() =>\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  const [fieldError, setFieldError] = useState(false);\r\n  const [languageError, setLanguageError] = useState(false);\r\n  const [passingGradeError, setPassingGradeError] = useState(false);\r\n  const [nameError, setNameError] = useState(false);\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [subjectError, setSubjectError] = useState(false);\r\n\r\n  useEffect(async () => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const idParam = urlParams.get('id');\r\n    const test = await getTestById.getTestById(idParam);\r\n    let data = test.data[0];\r\n    console.log(data);\r\n    updateState(data);\r\n  }, []);\r\n\r\n  const updateState = (data) => {\r\n    console.log(data.name);\r\n    setField(data.field);\r\n    setLenguage(data.language);\r\n    setPassingGrade(data.passingGrade);\r\n    setName(data.name);\r\n    setEmail(data.createrEmail);\r\n    // setHeader(data.opening);\r\n    // setSuccessMsg(EditorState.createWithContent(data.passingText));\r\n    // setFailMsg(EditorState.createWithContent(data.failText));\r\n    // setSubject;\r\n    // setPassingEditor;\r\n    // setFailingEditor;\r\n  };\r\n\r\n  const newTestHandler = () => {\r\n    const date = new Date();\r\n    const id = uuidv4();\r\n\r\n    if (field === '') {\r\n      setFieldError(true);\r\n    } else if (language === '') {\r\n      setLanguageError(true);\r\n    } else if (passingGrade > 100 || passingGrade < 0) {\r\n      setPassingGradeError(true);\r\n    } else if (name === '') {\r\n      setNameError(true);\r\n    } else if (email === '') {\r\n      setEmailError(true);\r\n    } else if (subject === '') {\r\n      setSubjectError(true);\r\n    } else {\r\n      const newTest = {\r\n        testId: id,\r\n        field: field,\r\n        name: name,\r\n        lastUpdated: `${date.getDate()}/${\r\n          date.getMonth() + 1\r\n        }/${date.getFullYear()}`,\r\n        language: language,\r\n        opening: header,\r\n        questions: questions,\r\n        createrEmail: email,\r\n        passingGrade: passingGrade,\r\n        answerReview: false,\r\n        testUrl: `http://localhost:3000/api/startTest?id=${id}`,\r\n        certificateUtl: 'abc',\r\n        passingText: successMsg,\r\n        failText: failMsg,\r\n        emailId: uuidv4(),\r\n        subject: subject,\r\n        successBody: passingEditor,\r\n        failBody: failingEditor\r\n      };\r\n\r\n      newTestService.addTest(newTest);\r\n      navigation('/test-added');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"new-test-container\">\r\n      <Button\r\n        onClick={() => {\r\n          console.log(name);\r\n        }}\r\n      >\r\n        click\r\n      </Button>\r\n      <h1>New Test</h1>\r\n      <UpdateTestForm\r\n        field={field}\r\n        setField={setField}\r\n        language={language}\r\n        setLenguage={setLenguage}\r\n        passingGrade={passingGrade}\r\n        setPassingGrade={setPassingGrade}\r\n        name={name}\r\n        setName={setName}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        header={header}\r\n        setHeader={setHeader}\r\n        successMsg={successMsg}\r\n        setSuccessMsg={setSuccessMsg}\r\n        failMsg={failMsg}\r\n        setFailMsg={setFailMsg}\r\n        fieldError={fieldError}\r\n        languageError={languageError}\r\n        passingGradeError={passingGradeError}\r\n        nameError={nameError}\r\n        emailError={emailError}\r\n      />\r\n      <QuestionSelector questions={questions} setQuestions={setQuestions} />\r\n      <UpdateEmailForm\r\n        setSubject={setSubject}\r\n        passingEditor={passingEditor}\r\n        setPassingEditor={setPassingEditor}\r\n        failingEditor={failingEditor}\r\n        setFailingEditor={setFailingEditor}\r\n        subjectError={subjectError}\r\n      />\r\n      <Container textAlign=\"right\">\r\n        <Button className=\"ui green button\" onClick={newTestHandler}>\r\n          Create New Test\r\n        </Button>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateTest;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getTestById.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateTestForm.js\\UpdateTestForm.js",["180","181"],"import { useState, useEffect } from 'react';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport TextEditor from '../../UI/TextEditor/TextEditor';\r\nimport getFieldsService from '../../../services/getFieldsService';\r\n\r\nconst UpdateTestForm = (props) => {\r\n  const [fields, setFields] = useState([]);\r\n  const languageOptions = [\r\n    { key: 'hebrew', value: 'hebrew', text: 'Hebrew' },\r\n    { key: 'english', value: 'english', text: 'English' }\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    var fieldsData = await getFieldsService.getFields();\r\n    fieldsData.data.map((f) => {\r\n      setFields((prevState) => [\r\n        ...prevState,\r\n        { key: f.fieldName, value: f.fieldName, text: f.fieldName }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Field:\r\n        <Form.Select\r\n          value={props.field}\r\n          error={props.fieldError}\r\n          selection\r\n          placeholder=\"Select a Field\"\r\n          options={fields}\r\n          onChange={(e) => props.setField(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Language:\r\n        <Form.Select\r\n          value={props.language}\r\n          error={props.languageError}\r\n          selection\r\n          placeholder=\"Select a Language\"\r\n          options={languageOptions}\r\n          onChange={(e) => props.setLenguage(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Test Name:\r\n        <Form.Input\r\n          value={props.name}\r\n          error={props.nameError}\r\n          fluid\r\n          placeholder=\"Test Name\"\r\n          onChange={(e) => props.setName(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Creater Email:\r\n        <Form.Input\r\n          value={props.email}\r\n          error={props.emailError}\r\n          fluid\r\n          placeholder=\"Email\"\r\n          onChange={(e) => props.setEmail(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Passing Grade:\r\n        <Form.Input\r\n          value={props.passingGrade}\r\n          error={props.passingGradeError}\r\n          fluid\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPassingGrade(e.target.value)}\r\n        />\r\n      </Header>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Header\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.header}\r\n          setEditorState={props.setHeader}\r\n        />\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Message to show on success:\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.successMsg}\r\n          setEditorState={props.setSuccessMsg}\r\n        />\r\n      </div>\r\n      <div className=\"wysiwyg-input\">\r\n        <Header textAlign=\"left\" as=\"h2\">\r\n          Message to show on failure:\r\n        </Header>\r\n        <TextEditor\r\n          editorState={props.failMsg}\r\n          setEditorState={props.setFailMsg}\r\n        />\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UpdateTestForm;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateTest\\UpdateEmail\\UpdateEmailForm.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\getQuestionById.js",[],"C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\components\\UpdateQuestion\\UpdateQuestionForm.js",["182","183"],"import React, { useState, useEffect } from 'react';\r\nimport { Header, Form } from 'semantic-ui-react';\r\nimport Answer from '../Answer/Answer';\r\n\r\nconst UpdateQuestionForm = (props) => {\r\n  const questionType = [\r\n    {\r\n      key: 'SingleChoiceQuestion',\r\n      value: 'SingleChoiceQuestion',\r\n      text: 'SingleChoiceQuestion'\r\n    },\r\n    {\r\n      key: 'MultipleSelectionQuestion',\r\n      value: 'MultipleSelectionQuestion',\r\n      text: 'MultipleSelectionQuestion'\r\n    }\r\n  ];\r\n  const viewAnswers = [\r\n    { key: 'Horizontal', value: 'Horizontal', text: 'Horizontal' },\r\n    { key: 'Vertical', value: 'Vertical', text: 'Vertical' }\r\n  ];\r\n\r\n  return (\r\n    <Form>\r\n      <Header textAlign=\"left\">\r\n        Question Type:\r\n        <Form.Select\r\n          value={props.questionType}\r\n          error={props.questionTypeError}\r\n          selection\r\n          placeholder=\"Select a question Type\"\r\n          options={questionType}\r\n          onChange={(e) => props.setQuestionType(e.target.innerText)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Title:\r\n        <Form.Input\r\n          value={props.title}\r\n          error={props.titleError}\r\n          placeholder=\"Title\"\r\n          onChange={(e) => props.setTitle(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Content:\r\n        <Form.Input\r\n          value={props.content}\r\n          placeholder=\"Content\"\r\n          onChange={(e) => props.setContent(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Points:\r\n        <Form.Input\r\n          value={props.points}\r\n          error={props.pointsError}\r\n          type=\"Number\"\r\n          onChange={(e) => props.setPoints(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        <p>*In tags you have to write a word and at the end ',' click on the space and write the next word </p>\r\n        Tags:\r\n        <Form.Input\r\n          value={props.tags}\r\n          error={props.tagsError}\r\n          type=\"Text\"\r\n          onChange={(e) => props.setTags(e.target.value)}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        Answers:\r\n        <Answer\r\n          value={props.answer1}\r\n          error={props.answer1Error}\r\n          setData={props.setAnswer1}\r\n          data={props.answer1}\r\n        />\r\n        <Answer\r\n          value={props.answer2}\r\n          error={props.answer2Error}\r\n          setData={props.setAnswer2}\r\n          data={props.answer2}\r\n        />\r\n        <Answer\r\n          value={props.answer3}\r\n          error={props.answer3Error}\r\n          setData={props.setAnswer3}\r\n          data={props.answer3}\r\n        />\r\n        <Answer\r\n          value={props.answer4}\r\n          error={props.answer4Error}\r\n          setData={props.setAnswer4}\r\n          data={props.answer4}\r\n        />\r\n      </Header>\r\n      <Header textAlign=\"left\">\r\n        viewAnswers:\r\n        <Form.Select\r\n          value={props.viewAnswers}\r\n          error={props.viewAnswersError}\r\n          selection\r\n          placeholder=\"Select a view answers\"\r\n          options={viewAnswers}\r\n          onChange={(e) => props.setViewAnswers(e.target.innerText)}\r\n        />\r\n      </Header>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UpdateQuestionForm;\r\n","C:\\Users\\user\\Downloads\\סלע\\יהלום\\Project\\Project\\QuizManager\\client\\src\\services\\newQuestionService.js",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":2,"column":10,"nodeType":"190","messageId":"191","endLine":2,"endColumn":19},{"ruleId":"192","severity":1,"message":"193","line":10,"column":13,"nodeType":"194","endLine":26,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":15,"column":31,"nodeType":"194","messageId":"197","endLine":15,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":20,"column":33,"nodeType":"194","messageId":"197","endLine":20,"endColumn":35},{"ruleId":"192","severity":1,"message":"193","line":11,"column":13,"nodeType":"194","endLine":31,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":15,"column":37,"nodeType":"194","messageId":"197","endLine":15,"endColumn":39},{"ruleId":"195","severity":1,"message":"196","line":21,"column":37,"nodeType":"194","messageId":"197","endLine":21,"endColumn":39},{"ruleId":"195","severity":1,"message":"196","line":22,"column":23,"nodeType":"194","messageId":"197","endLine":22,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":23,"column":30,"nodeType":"194","messageId":"197","endLine":23,"endColumn":32},{"ruleId":"188","severity":1,"message":"198","line":1,"column":16,"nodeType":"190","messageId":"191","endLine":1,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":13,"column":13,"nodeType":"194","endLine":21,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":15,"column":29,"nodeType":"194","messageId":"197","endLine":15,"endColumn":31},{"ruleId":"188","severity":1,"message":"198","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"199","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"200","severity":1,"message":"201","line":1,"column":1,"nodeType":"202","endLine":3,"endColumn":3},{"ruleId":"192","severity":1,"message":"193","line":10,"column":13,"nodeType":"194","endLine":18,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":12,"column":29,"nodeType":"194","messageId":"197","endLine":12,"endColumn":31},{"ruleId":"203","severity":1,"message":"204","line":32,"column":9,"nodeType":"205","endLine":32,"endColumn":25},{"ruleId":"188","severity":1,"message":"206","line":2,"column":43,"nodeType":"190","messageId":"191","endLine":2,"endColumn":49},{"ruleId":"192","severity":1,"message":"193","line":11,"column":13,"nodeType":"194","endLine":29,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":13,"column":38,"nodeType":"194","messageId":"197","endLine":13,"endColumn":40},{"ruleId":"195","severity":1,"message":"196","line":19,"column":40,"nodeType":"194","messageId":"197","endLine":19,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":20,"column":26,"nodeType":"194","messageId":"197","endLine":20,"endColumn":28},{"ruleId":"195","severity":1,"message":"196","line":21,"column":33,"nodeType":"194","messageId":"197","endLine":21,"endColumn":35},{"ruleId":"188","severity":1,"message":"207","line":31,"column":9,"nodeType":"190","messageId":"191","endLine":31,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":71,"column":19,"nodeType":"205","endLine":71,"endColumn":39},{"ruleId":"195","severity":1,"message":"196","line":16,"column":29,"nodeType":"194","messageId":"197","endLine":16,"endColumn":31},{"ruleId":"192","severity":1,"message":"208","line":19,"column":6,"nodeType":"209","endLine":19,"endColumn":18,"suggestions":"210"},{"ruleId":"195","severity":1,"message":"196","line":28,"column":31,"nodeType":"194","messageId":"197","endLine":28,"endColumn":33},{"ruleId":"192","severity":1,"message":"193","line":32,"column":15,"nodeType":"194","endLine":38,"endColumn":8},{"ruleId":"188","severity":1,"message":"211","line":4,"column":23,"nodeType":"190","messageId":"191","endLine":4,"endColumn":35},{"ruleId":"192","severity":1,"message":"193","line":39,"column":13,"nodeType":"194","endLine":46,"endColumn":4},{"ruleId":"192","severity":1,"message":"193","line":13,"column":13,"nodeType":"194","endLine":21,"endColumn":4},{"ruleId":"195","severity":1,"message":"196","line":15,"column":29,"nodeType":"194","messageId":"197","endLine":15,"endColumn":31},{"ruleId":"188","severity":1,"message":"198","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"199","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'viewQuestion' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.id' and 'props.questions'. Either include them or remove the dependency array.","ArrayExpression",["214"],"'ContentState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},"Update the dependencies array to be: [props.id, props.questions, props.tags]",{"range":"217","text":"218"},[384,396],"[props.id, props.questions, props.tags]"]